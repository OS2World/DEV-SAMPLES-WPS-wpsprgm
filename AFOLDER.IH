
/*
 * This file was generated by the SOM Compiler.
 * FileName: afolder.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef afolder_ih
#define afolder_ih


/*
 * Passthru lines: File: "C.ih", "before"
 */

#define INCL_WIN
#define INCL_DOS
#define INCL_GPIBITMAPS
#include <os2.h>

#define INCL_WPCLASS
#define INCL_WPFOLDER

#include <pmwp.h>

#define DebugBox(title, text) \
                                    \
                 WinMessageBox(     \
                    HWND_DESKTOP,   \
                    HWND_DESKTOP,   \
                    (PSZ) text,     \
                    (PSZ) title,    \
                    20,             \
                    MB_OK | MB_INFORMATION | MB_MOVEABLE)



#include "afolder.h"

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass aFolderCClassData.parentMtab
#endif

#define aFolder_MaxNoMethods 0

/*
 * Instance data
 */
typedef void aFolderData;

/*
 * Trace/Debug macro
 */
#ifndef aFolderMethodDebug
#define aFolderMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef aFolder_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */
#undef SOMMeta
#define SOMMeta M_aFolderCClassData.parentMtab
#undef SOMInstance
#define SOMInstance aFolderCClassData.parentMtab

#ifndef M_aFolder_Class_Source
#define M_aFolder_Class_Source
#endif    /* M_aFolder_Class_Source */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpOpen
 */
#pragma linkage(afolder_wpOpen, system)
SOM_Scope HWND   SOMLINK afolder_wpOpen(aFolder *somSelf,
		HWND hwndCnr,
		ULONG ulView,
		ULONG param);
#ifndef parent_wpOpen
static char *somMN_wpOpen = "wpOpen";
static somId somId_wpOpen = &somMN_wpOpen;
#define parent_wpOpen(somSelf,hwndCnr,ulView,param) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpOpen)) \
	 (somSelf,hwndCnr,ulView,param))
#endif
#define aFolderParent_wpOpen parent_wpOpen

/*
 * Overridden method: wpMenuItemSelected
 */
#pragma linkage(afolder_wpMenuItemSelected, system)
SOM_Scope BOOL   SOMLINK afolder_wpMenuItemSelected(aFolder *somSelf,
		HWND hwndFrame,
		ULONG ulMenuId);
#ifndef parent_wpMenuItemSelected
static char *somMN_wpMenuItemSelected = "wpMenuItemSelected";
static somId somId_wpMenuItemSelected = &somMN_wpMenuItemSelected;
#define parent_wpMenuItemSelected(somSelf,hwndFrame,ulMenuId) \
	((SOM_ParentResolveE(WPObject, SOM_CurrentClass, wpMenuItemSelected)) \
	 (somSelf,hwndFrame,ulMenuId))
#endif
#define aFolderParent_wpMenuItemSelected parent_wpMenuItemSelected

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure aFoldertempClassData;

/*
 * Initialize the class data structure
 */
struct aFolderClassDataStructure aFolderClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct aFolderCClassDataStructure aFolderCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t aFolderOM[] = {
    {    &somId_wpOpen,
         (somMethodProc *) afolder_wpOpen    },
    {    &somId_wpMenuItemSelected,
         (somMethodProc *) afolder_wpMenuItemSelected    },
};

static void aFoldersomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = aFolderOM, i = 0; i < 2; omp++, i++)
	    _somOverrideSMethod (aFoldertempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(aFoldersomCreateClass, system)
static void SOMLINK aFoldersomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    aFoldertempClassData.classObject = _somNew (mClsObj);
    _somInitClass (aFoldertempClassData.classObject,
		"aFolder",
		pClsObj,
		0,
		aFolder_MaxNoMethods,
		aFolder_MajorVersion,
		aFolder_MinorVersion);
    aFolderCClassData.instanceDataToken = 
	_somGetInstanceToken(aFoldertempClassData.classObject);
    aFoldersomInitializeClass();
    aFolderCClassData.parentMtab =
	_somGetPClsMtab(aFoldertempClassData.classObject);
    _somSetClassData(aFoldertempClassData.classObject, (somClassDataStructure *)&aFolderClassData);
    _somClassReady(aFoldertempClassData.classObject);
    /* make newly created class object visible */
    aFolderClassData.classObject = aFoldertempClassData.classObject;
}

aFolder * SOMLINK aFolderNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != aFolder_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > aFolder_MinorVersion))) {
	somPrintf("aFolderNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (aFolderClassData.classObject != (SOMAny *) NULL)
	return(aFolderClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    WPFolderNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("WPFolder"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Explicit metaclass, so get it */ 
    M_aFolderNewClass(0,0);	/* static reference */
    mClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_aFolder"), 0, 0);
    if (mClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoMetaClass);

    somConstructClass(aFoldersomCreateClass, pClsObj, mClsObj,
		     &aFoldertempClassData);
    return (aFolderClassData.classObject);
}

#endif                   /* aFolder_Class_Source */

#endif       /* afolder_ih */

/*
 * This file was generated by the SOM Compiler.
 * FileName: afolder.ih.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitih: 1.59
 */

#ifndef afolder_mih
#define afolder_mih


/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#ifdef __cplusplus
#define SOM_Scope extern "C"
#else
#define SOM_Scope extern
#endif
#endif

#ifndef SOM_CurrentClass
#define SOM_CurrentClass M_aFolderCClassData.parentMtab
#endif

#define M_aFolder_MaxNoMethods 0

/*
 * Instance data
 */
typedef void M_aFolderData;

/*
 * Trace/Debug macro
 */
#ifndef M_aFolderMethodDebug
#define M_aFolderMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * Begin stuff that only goes in the primary file
 */
#ifdef M_aFolder_Class_Source

/*
 * Current class macros for Instance and Meta classes.
 */

/*
 * Generate the Apply Stubs.
 */

/*
 * Overridden method: wpclsInitData
 */
#pragma linkage(afolderM_wpclsInitData, system)
SOM_Scope void   SOMLINK afolderM_wpclsInitData(M_aFolder *somSelf);
#ifndef parent_wpclsInitData
static char *somMN_wpclsInitData = "wpclsInitData";
static somId somId_wpclsInitData = &somMN_wpclsInitData;
#define parent_wpclsInitData(somSelf) \
	((SOM_ParentResolveE(M_WPObject, SOM_CurrentClass, wpclsInitData)) \
	 (somSelf))
#endif
#define M_aFolderParent_wpclsInitData parent_wpclsInitData

/*
 * Temporary class data structure used only in class creation
 */
static somClassDataStructure M_aFoldertempClassData;

/*
 * Initialize the class data structure
 */
struct M_aFolderClassDataStructure M_aFolderClassData = {(SOMAny *) NULL};

/*
 * Define the C class data structure
 */
struct M_aFolderCClassDataStructure M_aFolderCClassData = {(somMethodTab *) NULL};

/*
 * Routines to create the class object
 */

/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_aFolderOM[] = {
    {    &somId_wpclsInitData,
         (somMethodProc *) afolderM_wpclsInitData    },
};

static void M_aFoldersomInitializeClass ()
{
	int i;
	somOverrideMethod_t *omp;

/*
 * Override methods.
 */
	for (omp = M_aFolderOM, i = 0; i < 1; omp++, i++)
	    _somOverrideSMethod (M_aFoldertempClassData.classObject,
	        *(omp->methodId), omp->method);

}

#pragma linkage(M_aFoldersomCreateClass, system)
static void SOMLINK M_aFoldersomCreateClass(SOMClass *pClsObj,
                           SOMClass *mClsObj)
{
    M_aFoldertempClassData.classObject = _somNew (mClsObj);
    _somInitClass (M_aFoldertempClassData.classObject,
		"M_aFolder",
		pClsObj,
		0,
		M_aFolder_MaxNoMethods,
		M_aFolder_MajorVersion,
		M_aFolder_MinorVersion);
    M_aFolderCClassData.instanceDataToken = 
	_somGetInstanceToken(M_aFoldertempClassData.classObject);
    M_aFoldersomInitializeClass();
    M_aFolderCClassData.parentMtab =
	_somGetPClsMtab(M_aFoldertempClassData.classObject);
    _somSetClassData(M_aFoldertempClassData.classObject, (somClassDataStructure *)&M_aFolderClassData);
    _somClassReady(M_aFoldertempClassData.classObject);
    /* make newly created class object visible */
    M_aFolderClassData.classObject = M_aFoldertempClassData.classObject;
}

M_aFolder * SOMLINK M_aFolderNewClass (integer4 scemajorVersion,
		integer4 sceminorVersion)
{
    SOMClass *pClsObj;
    SOMClass *mClsObj;

    /* Check the version numbers */
    if (((scemajorVersion != 0) && 
         (scemajorVersion != M_aFolder_MajorVersion)) ||
        ((sceminorVersion != 0) && 
         (sceminorVersion > M_aFolder_MinorVersion))) {
	somPrintf("M_aFolderNewClass: Error, bad version numbers.\n");
	SOM_Error(SOMERROR_BadVersion);
    }
    /* Don't do anything if class object is already created. */
    if (M_aFolderClassData.classObject != (SOMAny *) NULL)
	return(M_aFolderClassData.classObject);

    /* Make sure the environment is initialized. */
    if (SOMClassMgrObject == (SOMAny *) NULL) somEnvironmentNew();
    if (SOMClassMgrObject == (SOMAny *) NULL)
	SOM_Error(SOMERROR_CouldNotStartup);

    /* Get the parent class object. */
    M_WPFolderNewClass(1,2);	/* static reference */
    pClsObj = _somFindClass(SOMClassMgrObject,
		SOM_IdFromString("M_WPFolder"), 1, 2);
    if (pClsObj == (SOMClass *) NULL)
	SOM_Error(SOMERROR_NoParentClass);

    /* Use parent's metaclass */ 
    mClsObj = SOM_GetClass(pClsObj);

    somConstructClass(M_aFoldersomCreateClass, pClsObj, mClsObj,
		     &M_aFoldertempClassData);
    return (M_aFolderClassData.classObject);
}

#endif                   /* M_aFolder_Class_Source */

#endif       /* afolder_ih */
